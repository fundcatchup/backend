schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Group
  @join__type(graph: API)
{
  id: GroupId!
  name: String!
  type: GroupType

  """Group Cover Picture in base64 format"""
  pic: String
  members: [UserId!]!
}

scalar GroupId
  @join__type(graph: API)

enum GroupType
  @join__type(graph: API)
{
  FRIENDS @join__enumValue(graph: API)
  TRIP @join__enumValue(graph: API)
  HOME @join__enumValue(graph: API)
  COUPLE @join__enumValue(graph: API)
  OTHER @join__enumValue(graph: API)
}

scalar join__FieldSet

enum join__Graph {
  API @join__graph(name: "api", url: "http://fundcatchup-host:4051/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: API)
{
  createGroup(newGroup: NewGroup!): Group!
}

input NewGroup
  @join__type(graph: API)
{
  name: String!
  type: GroupType

  """Group Cover Picture in base64 format"""
  pic: String
  members: [UserId!]!
}

type Query
  @join__type(graph: API)
{
  whoami: String
}

scalar UserId
  @join__type(graph: API)